"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on

"Convert tabs to spaces
set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4
" Search details
set incsearch
set hlsearch
" Do no wrap searching
set nowrapscan
" To aid the colorscheme...
set t_Co=256
" Create line numbers on the left side of vi, 6 digits worth
set number
set numberwidth=6
" Set text wrapping at 132 columns
set tw=132
" Indent to the tab positiion when  you cross over the 80 line limit.
set smartindent
" Leave a couple of lines at the top and bottom when scrolling
set scrolloff=2
" Give context on where you are in the file
set ruler
" wrapping is a problem more often than not.
set nowrap


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPPING
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Make 'Q' not annoyingly enter into ex edit mode!
nnoremap Q <nop>
nnoremap K <nop>

" Always show a ctags list
nnoremap <C-]> g<C-]>

" Window splitting (vertical and horizontal)
"nnoremap <C-v> :vsp<CR>
"nnoremap <C-h> :sp<CR>

" Auto completion
imap <C-t> <C-p>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" DOXYGEN
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <F6> O/**/O
map <F7> A /**<  */hhi


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UNDO
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('persistent_undo')
    set undodir=$HOME/.vim/undodir
    set undofile
    set undolevels=1000
    set undoreload=10000
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AUTOCOMPLETE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('wildmenu')
"    set wildmode=list:longest,full
    set wildignore+=*.a,*.o,*.orig,*~
    set wildmenu
    set wildmode=longest,list
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MOUSE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Allow the mouse to be used for selecting
" :set mouse=""     Disable all mouse behaviour.
" :set mouse=a      Enable all mouse behaviour (the default).
" :set mouse+=v     Enable visual mode (v)
" :set mouse-=c     Disable mouse in command mode.


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLORS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
highlight Folded       ctermfg=7   ctermbg=8
highlight FoldColumn   ctermfg=7   ctermbg=8
highlight Search       ctermfg=16  ctermbg=11
highlight VertSplit    ctermfg=8   ctermbg=0
highlight StatusLine   ctermfg=8   ctermbg=2
highlight StatusLineNC ctermfg=8   ctermbg=60
highlight LineNr       ctermfg=60
highlight Comment      ctermfg=60
highlight Number       ctermfg=202
highlight Search       ctermfg=15  ctermbg=12
highlight Todo         ctermfg=15  ctermbg=11


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SYNTAX HIGHLIGHTING
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufRead,BufNewFile *.c,*.h,*.cpp syntax match pointer /\*[a-z,A-Z,0-9]*++/
autocmd BufRead,BufNewFile *.c,*.h,*.cpp highlight pointer term = NONE ctermfg=Yellow
autocmd BufRead,BufNewFile *.c,*.h,*.cpp syntax match privCtx /privCtx/
autocmd BufRead,BufNewFile *.c,*.h,*.cpp highlight privCtx term = NONE ctermfg=Yellow
autocmd BufRead,BufNewFile *.c,*.h,*.cpp syntax match annotate
\ /\/\*\* [\:A-Za-z0-9 \n\r\*\\\/]* \*\*\//
autocmd BufRead,BufNewFile *.c,*.h,*.cpp highlight annotate
\ term=NONE ctermfg=8 ctermbg=2 cterm=bold
autocmd BufRead,BufNewFile *.c,*.h,*.cpp syntax match wescam /moduleSend\w*/
autocmd BufRead,BufNewFile *.c,*.h,*.cpp syntax keyword wescam
\ MSG_Q_ID msgQDelete msgQCreate msgQSend msgQReceive
\ moduleAddCmdQ moduleRemoveCmdQ moduleAddCmd moduleGetCmd moduleRemoveCmd
\ moduleAddCmdRespQ moduleRemoveCmdRespQ moduleAddCmdResp moduleAddCmdResp
\ moduleRemoveCmdResp
autocmd BufRead,BufNewFile *.c,*.h,*.cpp highlight wescam term=NONE ctermfg=Yellow

autocmd BufRead,BufNewFile *.c,*.h,*.cpp syntax match defining /#\(define\|undef\) \w*/
autocmd BufRead,BufNewFile *.c,*.h,*.cpp highlight defining term=NONE ctermfg=205

"syn match unimportant /moduleLogError(.*\n\=.*\n\=.*);/
autocmd BufRead,BufNewFile *.c,*.h,*.cpp syntax match unimportant
\ /moduleLogError([a-zA-Z0-9-+><,\n \*"%.\\/&:?\[\]_\(\)]*);/
autocmd BufRead,BufNewFile *.c,*.h,*.cpp highlight unimportant term=NONE ctermfg=244
autocmd BufRead,BufNewFile *.c,*.h,*.cpp syntax match this /this/
autocmd BufRead,BufNewFile *.c,*.h,*.cpp highlight this term=NONE ctermfg=3
autocmd BufRead,BufNewFile *.c,*.h,*.cpp syntax match Identifier /\w\+_t\ze\W/
autocmd BufRead,BufNewFile *.c,*.h,*.cpp syntax match Identifier 'rtems_[a-z_]*\( \|(\)'
autocmd BufRead,BufNewFile *.c,*.h,*.cpp syntax keyword cSpecial
\ TRUE FALSE
\ UNITY UNITY_FLOAT UNITY_SHIFT
\ UNITY7 UNITY7_FLOAT UNITY7_SHIFT
\ UNITY23 UNITY23_FLOAT UNITY23_SHIFT
\ BIT_1 BIT_2 BIT_3 BIT_4 BIT_5 BIT_6 BIT_7 BIT_8
\ BIT_9 BIT_10 BIT_11 BIT_12 BIT_13 BIT_14 BIT_15
\ BIT_A BIT_B BIT_C BIT_D BIT_E BIT_F
\ BIT_16 BIT_17 BIT_18 BIT_19 BIT_20 BIT_21 BIT_22
\ BIT_23 BIT_24 BIT_25 BIT_26 BIT_27 BIT_28 BIT_29
\ BIT_30 BIT_31


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AUTO COMMANDS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("autocmd")
" autocmd BufRead,BufNewFile *.[ch] let fname = expand('<afile>:p:h') . '/types.vim'
" autocmd BufRead,BufNewFile *.[ch] if filereadable(fname)
" autocmd BufRead,BufNewFile *.[ch]   exe 'so ' . fname
" autocmd BufRead,BufNewFile *.[ch] endif

" Remove trailing whitepsaces for each line on save.
" Highlight text that goes past the 80 line limit.
augroup vimrc_autocmds
" autocmd BufReadPre * setlocal foldmethod=syntax
" autocmd BufWinEnter * if &fdm == 'syntax' | setlocal foldmethod=manual | endif
  autocmd BufEnter * highlight OverLength ctermbg=7 ctermfg=0 guibg=#707070
  autocmd BufEnter * match OverLength /\%133v.*/
augroup END

if has("autocmd")
" autocmd BufRead,BufNewFile *.[ch] let fname = expand('<afile>:p:h') . '/types.vim'
" autocmd BufRead,BufNewFile *.[ch] if filereadable(fname)
" autocmd BufRead,BufNewFile *.[ch]   exe 'so ' . fname
" autocmd BufRead,BufNewFile *.[ch] endif
" Remove trailing whitepsaces for each line on save.
  autocmd BufWritePre * :%s/\s\+$//e
endif

augroup cprog
  " Remove all cprog autocommands
  au!

  " For *.c and *.h files set formatting of comments and set C-indenting on.
  " For other files switch it off.
  " Don't change the order, it's important that the line with * comes first.
    autocmd BufRead,BufNewFile *       set formatoptions=tcql nocindent comments&
    autocmd BufRead,BufNewFile *.c,*.h,*.cpp set formatoptions=croql cindent comments=sr:/*,mb:*,el:*/,://
    set cino=:0,(0,c1
  augroup END

  autocmd BufWritePre * :%s/\s\+$//e
endif

" Automatically update the ctags file when a file is written
function! DelTagOfFile(file)
  let fullpath = a:file
  let cwd = getcwd()
  let tagfilename = cwd . "/tags"
  let f = substitute(fullpath, cwd . "/", "", "")
  let f = escape(f, './')
  let cmd = 'sed -i "/' . f . '/d" "' . tagfilename . '"'
  let resp = system(cmd)
endfunction

function! UpdateTags()
  let f = expand("%:p")
  let cwd = getcwd()
  let tagfilename = cwd . "/tags"
  let cmd = 'ctags -a -f ' . tagfilename . ' --c++-kinds=+p --fields=+iaS --extra=+q ' . '"' . f . '"'
  call DelTagOfFile(f)
  let resp = system(cmd)
endfunction
autocmd BufWritePost *.cpp,*.h,*.c call UpdateTags()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Git Fugitive
"set statusline=%{fugitive#statusline()}
set diffopt+=vertical

" Mark.vim
" Map these keys to search Marked items (from mark.vim plugin)
map <C-j> \*
map <C-k> \#

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Cscope
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=0
    set cst
    set nocsverb
    set cscopetag
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb
endif

map g<C-]> :cs find 3 <C-R>=expand("<cword>")<CR><CR>
map g<C-\> :cs find 0 <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>a :cs find a <C-R>=expand("<cword>")<CR><CR>

" Using 'CTRL-spacebar' then a search type makes the vim window
" split horizontally, with search result displayed in
" the new window.

nmap <C-Space>s :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space>g :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space>c :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space>t :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space>e :scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-Space>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-Space>d :scs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space>a :scs find a <C-R>=expand("<cword>")<CR><CR>

" Hitting CTRL-space *twice* before the search type does a vertical
" split instead of a horizontal one

nmap <C-Space><C-Space>s
    \:vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space><C-Space>g
    \:vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space><C-Space>c
    \:vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space><C-Space>t
    \:vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space><C-Space>e
    \:vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space><C-Space>i
    \:vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-Space><C-Space>d
    \:vert scs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-Space><C-Space>a
    \:vert scs find a <C-R>=expand("<cword>")<CR><CR>

set cscopetag


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" fzf
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set rtp+=~/.fzf

if executable('fzf')
    nnoremap <silent> <C-p> :Files<CR>
    nnoremap <silent> <C-l> :Ag<CR>
end


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" tagbar
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set runtimepath+=~/.tagbar
nmap <F8> :TagbarToggle<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PlantUML
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <F4>       :w<CR>:silent make<CR> :redraw!<CR>
inoremap <F4> <Esc> :w<CR>:silent make<CR> :redraw!<CR>
vnoremap <F4> :<C-U>:w<CR>:silent make<CR> :redraw!<CR>
nnoremap <F3>       :w<CR>:silent !xdg-open %:p:r.png<CR> :redraw!<CR>

autocmd Filetype plantuml setlocal makeprg=java\ -jar\ /opt/java/plantuml.jar\ %

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Clang-format
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map  <C-K>       :py3f /usr/share/clang/clang-format-8/clang-format.py<CR>
imap <C-K> <c-o> :py3f /usr/share/clang/clang-format-8/clang-format.py<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Date and Time
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <F9> "=strftime("%c")<CR>P
inoremap <F9> <C-R>=strftime("%c")<CR>

